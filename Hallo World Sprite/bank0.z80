; Blank rom file
; Produced with aid of documentation and similar files

;;;;;;;;;;;;;;Includes

INCLUDE "../Generics/Hardware.inc"

;;;;;;;;;;;;;;Assembler directives

;;;;;;;;;;;;;;Cartridge Header

;Restart calls
;There are eight of these from 0x00 to 0x40.
;Each takes up eight bytes of space, and takes a one-byte instruction to call
;Any short, commonly used function can be slotted into a RST for speed.

SECTION "RST $00", Home[$00]
RST_00:
	reti											;return and enable interrupts again, good stub for a restart call

SECTION "RST $08", Home[$08]
RST_08:
	reti

SECTION "RST $10", Home[$10]
RST_10:
	reti											

SECTION "RST $18", Home[$18]
RST_18:
	reti

SECTION "RST $20", Home[$20]
RST_20:
	reti											
	
SECTION "RST $28", Home[$28]
RST_28:
	reti

SECTION "RST $30", Home[$30]
RST_30:
	reti											
	
SECTION "RST $38", Home[$38]
RST_38:
	reti


;;;;;;;;;;;;;;Interrupt Routines!

;These simply need to be created based on the documentation
;Again eight bytes each

SECTION "V-blank Interrupt", Home[$40] 				;called on vblank; can write to VRAM; lasts about 1.1 ms
INT_VBLANK:
	reti

SECTION "LCDC Interrupt", Home[$48]					;can be called when a line is about to be drawn; used for post-processing effects
INT_LCDC:
	reti

SECTION "Timer Interrupt", Home[$50]				;called when timer rolls over to 0; varying interval based on user-set timer speed
INT_TIMER:
	reti

SECTION "Serial Interrupt", Home[$58] 				;called when the link cable finishes sending a byte of data
INT_SERIAL:
	reti

SECTION "Button Interrupt", Home[$60]				;called when a button is released; due to bounce, many false positives
INT_BUTTON:
	reti

;;;;;;;;;;;;;;Execution start point
SECTION "Execution Start", Home[$100]
	nop												;$100
	jp			Start 								;$101, $102, $103


;;;;;;;;;;;;;;Cartridge information

;Nintendo logo, $104 through $133
;Straight up copy paste
	DB	$CE,$ED,$66,$66,$CC,$0D,$00,$0B,$03,$73,$00,$83,$00,$0C,$00,$0D
	DB	$00,$08,$11,$1F,$88,$89,$00,$0E,$DC,$CC,$6E,$E6,$DD,$DD,$D9,$99
	DB	$BB,$BB,$67,$63,$6E,$0E,$EC,$CC,$DD,$DC,$99,$9F,$BB,$B9,$33,$3E

;$134 through $13E Title (11 characters)
	DB "HELLO WORLD"

;$13F through $142 Product code (4 characters); sometimes used as extension of title
	DB $00, $00, $00, $00

;$143 Gameboy Color Compatibility code
	DB $00											;$00 DMG, $80 DMG/GBC, $C0 GBC

;$144, $145 Licensee code (we have no license obviously); $144 is more significant
	DB $00, $00

;$146 SGB indicator, $00 gameboy $03 SGB functionality exists
	DB $00

;$147 Rom type, refer to cheat sheet. $00 ROM only
	DB $00

;$148 ROM size, refer to documentation. $02 8 banks
	DB $02

;$149 Cartridge RAM size; you need cartridge ram backed by battery to save
	DB $00

;$14A Region Code $00 Japan $01 Not-Japan
	DB $01

;$14B Old licensee code, must be $33
	DB $33

;$14C Mask ROM version number, handled by fix stage
	DB $00

;$14D Complement check, handled by fix stage
	DB $00

;$14E, $14F Checksum handled by fix stage
	DB $00, $00


;;;;;;;;;;;;;;Program start
SECTION "Program Start", Home[$0150]
;$0150 Beginning of executable code 2
Start::
	di										;disable interrupts, not using them
	ld		sp,				$DFFF			;put stack at top of internal RAM
	call 	WAIT_VBLANK						;wait for vblank so we can write to VRAM

	ld		A,				0				
	ldh		[_LCDC],		A				;turn off LCD

	call 	CLEAR_MAP
	call	LOAD_TILES
	call	LOAD_MAP

	;ld		A,				$10
	;ldh		[_SCX],			A
	;ldh		[_SCY],			A

	ld		A,				_PALETTE_NORMAL
	ldh		[_BG_PALETTE],	A

	ld		A,				%10010001		;LCD on, BG tiles $8000, tile map 0, bg display on
	ldh		[_LCDC],		A



Loop::

	halt
	nop
	jp Loop				;run execution forever


SECTION "Routines", Home

SCROLL::
	ld		A,				[_SCX]
	inc		A
;	cp		$3
;	jp		nz,				scroll_finish
;	ld		A,				$0
;scroll_finish:
	ld		[_SCX],			A
	ret

INIT_OAM_MIRROR::
	push 	HL
	push 	BC
	push	DE

	ld		HL,				OAM_MIRROR				
	ld		BC,				$A1				;OAM mirror plus flag
	ld		D,				$0
	call	MEMSET

	pop		DE
	pop		BC
	pop		HL
	ret

LOAD_TILES::
	push	HL
	push	DE
	push	BC

	ld		HL,				_TILE_DATA_0
	ld		DE,				FONT_TILES
	ld		BC,				16*27
	call	MEMCPY

	pop		BC
	pop		DE
	pop		HL
	ret

LOAD_MAP::
	push	HL
	push	DE
	push	BC

	ld		HL,				_BG_MAP_0
	ld		DE,				HELLO_WORLD_MAP
	ld		BC,				12
	call 	MEMCPY

	pop		BC
	pop		DE
	pop		HL
	ret


DMA_TRANSFER::
	push 	AF

	ld		A,				[_OAM_CHANGE_FLAG]
	call	nz,				DMA_TRANSFER_HIGH	;only do dma transfer if there are changes to propagate
	ld		A,				$0
	ld		[_OAM_CHANGE_FLAG],	A				;reset flag
	pop 	AF
	ret

SECTION "DMA Transfer High", HRAM
;Does a DMA transfer and waits
DMA_TRANSFER_HIGH::
	ld		A,				_OAM_MIRROR
	ld 		($FF46),		A

	ld		A,				$28				;dec 40, need to wait for transfer to complete
DTH_WAIT:	
	dec		A								;1 cycle
	jp		nz,				DTH_WAIT		;4 cycles
											;total 200 cycles ~ 210 microseconds
	ret										;get out of high ram
	
SECTION "Tiles", Home
FONT_TILES::
DB $00,$00,$00,$00,$00,$00,$00,$00
DB $00,$00,$00,$00,$00,$00,$00,$00  ;000 space
DB $00,$00,$38,$38,$6C,$6C,$C6,$C6
DB $FE,$FE,$FE,$FE,$C6,$C6,$C6,$C6	;img/001a.gray
DB $F8,$F8,$F8,$F8,$C4,$C4,$F8,$F8
DB $F8,$F8,$C4,$C4,$F8,$F8,$F8,$F8	;img/002b.gray
DB $38,$38,$7C,$7C,$C6,$C6,$C0,$C0
DB $C0,$C0,$C6,$C6,$7C,$7C,$38,$38	;img/003c.gray
DB $F0,$F0,$F8,$F8,$CC,$CC,$C4,$C4
DB $C4,$C4,$CC,$CC,$F8,$F8,$F0,$F0	;img/004d.gray
DB $FE,$FE,$FE,$FE,$C0,$C0,$FE,$FE
DB $FE,$FE,$C0,$C0,$FE,$FE,$FE,$FE	;img/005e.gray
DB $FE,$FE,$FE,$FE,$C0,$C0,$FE,$FE
DB $FE,$FE,$C0,$C0,$C0,$C0,$C0,$C0	;img/006f.gray
DB $7E,$7E,$F8,$F8,$C0,$C0,$CE,$CE
DB $DE,$DE,$C6,$C6,$FC,$FC,$78,$78	;img/007g.gray
DB $C6,$C6,$C6,$C6,$C6,$C6,$FE,$FE
DB $FE,$FE,$C6,$C6,$C6,$C6,$C6,$C6	;img/008h.gray
DB $FE,$FE,$FE,$FE,$38,$38,$38,$38
DB $38,$38,$38,$38,$FE,$FE,$FE,$FE	;img/009i.gray
DB $FE,$FE,$FE,$FE,$0C,$0C,$0C,$0C
DB $8C,$8C,$CC,$CC,$FC,$FC,$78,$78	;img/010j.gray
DB $CC,$CC,$DC,$DC,$F8,$F8,$F0,$F0
DB $F0,$F0,$D8,$D8,$CC,$CC,$CE,$CE	;img/011k.gray
DB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
DB $C0,$C0,$C0,$C0,$FE,$FE,$FE,$FE	;img/012L.gray
DB $C6,$C6,$EE,$EE,$EE,$EE,$D6,$D6
DB $D6,$D6,$D6,$D6,$D6,$D6,$C6,$C6	;img/013m.gray
DB $C6,$C6,$E6,$E6,$F6,$F6,$F6,$F6
DB $DE,$DE,$DE,$DE,$CE,$CE,$C6,$C6	;img/014n.gray
DB $38,$38,$FE,$FE,$C6,$C6,$C6,$C6
DB $C6,$C6,$C6,$C6,$FE,$FE,$38,$38	;img/015o.gray
DB $FC,$FC,$CE,$CE,$C6,$C6,$CE,$CE
DB $FC,$FC,$C0,$C0,$C0,$C0,$C0,$C0	;img/016p.gray
DB $7C,$7C,$EE,$EE,$C6,$C6,$92,$92
DB $CA,$CA,$E6,$E6,$7E,$7E,$01,$01	;img/017q.gray
DB $FC,$FC,$C6,$C6,$C6,$C6,$C6,$C6
DB $FC,$FC,$F8,$F8,$DC,$DC,$CE,$CE	;img/018r.gray
DB $FE,$FE,$C0,$C0,$C0,$C0,$FE,$FE
DB $FE,$FE,$06,$06,$06,$06,$FE,$FE	;img/019s.gray
DB $FF,$FF,$FF,$FF,$18,$18,$18,$18
DB $18,$18,$18,$18,$18,$18,$18,$18	;img/020t.gray
DB $C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6
DB $C6,$C6,$C6,$C6,$FE,$FE,$FE,$FE	;img/021u.gray
DB $C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6
DB $C6,$C6,$EE,$EE,$7C,$7C,$38,$38	;img/022v.gray
DB $D6,$D6,$D6,$D6,$D6,$D6,$D6,$D6
DB $D6,$D6,$FE,$FE,$FE,$FE,$EE,$EE	;img/023w.gray
DB $82,$82,$C6,$C6,$6C,$6C,$38,$38
DB $38,$38,$6C,$6C,$C6,$C6,$82,$82	;img/024x.gray
DB $81,$81,$C3,$C3,$66,$66,$3C,$3C
DB $18,$18,$18,$18,$18,$18,$18,$18	;img/025y.gray
DB $FE,$FE,$FE,$FE,$06,$06,$1C,$1C
DB $38,$38,$60,$60,$FE,$FE,$FE,$FE	;img/026z.gray


SECTION "Map", Home
HELLO_WORLD_MAP:
DB $08,$05,$0C,$0C,$0F,$00,$17,$0F  ;HELLO WO
DB $12,$0C,$04						;RLD

SECTION "OAM Mirror", BSS[$C000]
_OAM_MIRROR	EQU	$C0
OAM_MIRROR:
DS $A0								;0->9F, oam mirror
OAM_CHANGE_FLAG:
DS 1

